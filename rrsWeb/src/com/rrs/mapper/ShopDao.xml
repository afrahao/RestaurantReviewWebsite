<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rrs.mapper.ShopDao">


    <!-- 查询精选评论 -->
    <select id="selectReview"  resultType="com.rrs.pojo.Review">
        select * from  review
    </select>
    
    <delete parameterType="String" id="deleteTrack"> 
		delete from track where user_id=#{0} and business_id = #{1}
	</delete>

	<!-- 插入足迹-->
	<insert parameterType="String" id="insertTrack"> 
		INSERT INTO track (user_id,business_id,visit_time) VALUES(#{0},#{1},now()) 
	</insert>
	
	<!-- 返回指定用户的足迹ID -->	
	<select parameterType="String" id="getTrackBusiness" resultType="String"> 
		select business_id from track where user_id =#{0} order by visit_time desc 
	</select>


	<!-- 返回restaurant数量 -->
    <select id="getRestaurantNum" resultType="Integer">
        select count(*) from business
    </select>
    
	<!-- 返回一些restaurant -->
    <select id="getRestaurant" parameterType="Integer" resultType="com.rrs.pojo.Restaurant">
        select * from business LIMIT #{0},#{1}
    </select>
    
    <select id="getRestaurantByCate" resultType="com.rrs.pojo.Restaurant">
        select * from  business,business_cate
        <where>
            business.id = business_cate.business_id and business_cate.category_id in (4,23,134,49)
        </where>
    </select>
    
    <select id="getRestaurantByKind" parameterType="Integer" resultType="com.rrs.pojo.Restaurant">
        select * from  business,business_cate
        <where>
            business.id = business_cate.business_id and business_cate.category_id=#{0}
        </where>
    </select>
    
    <!-- 根据用户喜好标签返回商家 -->
    <select id="getRestaurantByFavor" resultType="com.rrs.pojo.Restaurant">
        select * from  business,business_cate
        <where>
            business.id = business_cate.business_id and business_cate.category_id in 
            <foreach item="item" index="index" collection="favor" open="(" separator="," close=")">
            	#{item}
         	</foreach>
        </where>
    </select>
    
    <!-- 返回restaurant By key -->
    <select id="getRestaurantSearch" parameterType="String" resultType="com.rrs.pojo.Restaurant">               
        select * from business where business.name like CONCAT('%',#{key},'%')      
    </select>
    
    <select id="getRestaurantSearchNum" parameterType="String" resultType="Integer" >
        select count(*) from business where business.name like CONCAT('%',#{key},'%') 
    </select>
    
     <!-- 返回single By name -->
    <select id="getRestaurantImg" parameterType="String" resultType="String">               
        select photo.id as img from photo where photo.business_id=#{shop_id}
    </select>
    
    <!-- 返回single By id -->
    <select id="getRestaurantById" parameterType="String" resultType="Restaurant">               
        select * from business where business.id = #{0}
    </select>
    
    <!-- 返回某个饭店的所有attribute -->
     <select id="getAttributes" parameterType="String" resultType="com.rrs.pojo.Attribute" >
        select * from attribute where business_id = #{0} 
    </select>
    
    <!-- 返回某个饭店的所有category -->
     <select id="getCategoryList" parameterType="String" resultType="String" >
        select category from category,business_cate where category.id = business_cate.category_id and business_id=#{0}
    </select>
   
   <!-- 返回某个饭店的所有hour -->
     <select id="getHourList" parameterType="String" resultType="String" >
        select hours from hours where business_id=#{0}
    </select>
   
   
       <!-- 返回某个饭店的所有review -->
     <select id="getReviewList" parameterType="String" resultType="com.rrs.pojo.Review" >
        select user.name as user_name,review.*,useful_status,funny_status,cool_status from (review left join user on review.user_id=user.id) left join user_review on review.id = user_review.review_id where business_id=#{0} order by date desc     
    </select>
   
    <!-- 查询 -->
    <select id="getUserLike"  resultType="com.rrs.pojo.MyNode">
        select * from  user_cate
    </select>
    
    <!-- 返回距离指定地点指定范围的restaurant -->
    <select id="getRestaurantByDistance1" resultType="com.rrs.pojo.Restaurant">
	    SELECT 
	    *,
	    photo.id as img,
	    ROUND(
	        6378.138 * 2 * ASIN(
	            SQRT(
	                POW(
	                    SIN(
	                        (
	                            #{0} * PI() / 180 - latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS(#{0} * PI() / 180) * COS(latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{1} * PI() / 180 - longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	            )
	        ) * 1000
	    ) AS distance
	FROM
	    business,photo
	where business.id=photo.business_id
	HAVING
		distance &lt;= #{2}
	ORDER BY
	    distance ASC
	LIMIT 1,150
    </select> 
    <!-- 返回距离指定地点指定范围的restaurant -->
    <select id="getRestaurantByDistance2" resultType="com.rrs.pojo.Restaurant">
	    SELECT 
	    *,
	    photo.id as img,
	    ROUND(
	        6378.138 * 2 * ASIN(
	            SQRT(
	                POW(
	                    SIN(
	                        (
	                            #{0} * PI() / 180 - latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS(#{0} * PI() / 180) * COS(latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{1} * PI() / 180 - longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	            )
	        ) * 1000
	    ) AS distance
	FROM
	    business,photo
	where business.id=photo.business_id
	HAVING
		distance &lt;= #{3} and  distance &gt;= #{2}
	ORDER BY
	    distance ASC
	LIMIT 1,150
    </select> 
    <!-- 返回距离指定地点指定范围的restaurant -->
    <select id="getRestaurantByDistance3" resultType="com.rrs.pojo.Restaurant">
	    SELECT 
	    *,
	    photo.id as img,
	    ROUND(
	        6378.138 * 2 * ASIN(
	            SQRT(
	                POW(
	                    SIN(
	                        (
	                            #{0} * PI() / 180 - latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS(#{0} * PI() / 180) * COS(latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{1} * PI() / 180 - longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	            )
	        ) * 1000
	    ) AS distance
	FROM
	    business,photo
	where business.id=photo.business_id
	HAVING
		distance &gt;= #{2}
	ORDER BY
	    distance ASC
	LIMIT 1,150
    </select> 
    
    <!-- 返回历史搜索记录 By userid -->
    <select id="getSearchRec" parameterType="String" resultType="String">               
        select searkey from search_rec where uid=#{0} order by updatetime desc limit 0,10
    </select>
    

    <!-- 插入评论-->
	<insert id="insertReview"> 
		INSERT INTO review (id,business_id,user_id,stars,date,text) VALUES(#{0},#{1},#{2},#{3},now(),#{4}) 
	</insert>

    <!-- 返回热门搜索记录  -->
    <select id="getSearchHot"  resultType="String">               
        select hotkey from search_hot order by count desc limit 0,10
    </select>
    
       
        <!-- 更新用户点赞与取消赞的表-->
	<update id="updateUserUseful"> 
		update user_review set useful_status=#{2}
		where review_id = #{1} and user_id = #{0}; 
	</update>
	
	 <!-- 更新用户点赞与取消赞的表-->
	<update id="updateUserCool"> 
		update user_review set cool_status=#{2}
		where review_id = #{1} and user_id = #{0}; 
	</update>
	
	 <!-- 更新用户点赞与取消赞的表-->
	<update id="updateUserFunny"> 
		update user_review set funny_status=#{2}
		where review_id = #{1} and user_id = #{0}; 
	</update>

    <!-- 用户点赞与取消useful的插入-->
	<insert id="insertUserUseful"> 
		INSERT INTO user_review (user_id,review_id,useful_status) VALUES(#{0},#{1},#{2}) 
	</insert>
	
	 <!-- 用户点赞与取消cool的插入-->
	<insert id="insertUserCool"> 
		INSERT INTO user_review (user_id,review_id,cool_status) VALUES(#{0},#{1},#{2}) 
	</insert>
	
	 <!-- 用户点赞与取消funny的插入-->
	<insert id="insertUserFunny"> 
		INSERT INTO user_review (user_id,review_id,funny_status) VALUES(#{0},#{1},#{2}) 
	</insert>
	
	
      <!-- 点赞或取消useful-->
	<update id="updateUseful"> 
	update review set useful=useful+(#{1})
	where id = #{0}; 
	</update>
	
	     <!-- 点赞或取消funny-->
	<update id="updateFunny"> 
	update review set funny=funny+(#{1})
	where id = #{0}; 
	</update>
	
	     <!-- 点赞或取消cool-->
	<update id="updateCool"> 
	update review set cool=cool+(#{1})
	where id = #{0}; 
	</update>
	
    
     <!-- 按名字搜索数目 -->
    <select id="getSearchNumName" parameterType="String" resultType="Integer" >
        select count(*) from business where business.name like CONCAT('%',#{key},'%') 
    </select>
    
    <!--  按城市搜索数目-->
    <select id="getSearchNumCity" parameterType="String" resultType="Integer" >
        select count(*) from business where business.city like CONCAT('%',#{key},'%') 
    </select>
    
    <!--  按地址搜索数目-->
    <select id="getSearchNumAddr" parameterType="String" resultType="Integer" >
        select count(*) from business where business.address like CONCAT('%',#{key},'%') 
    </select>
    
    <!--  按标签搜索数目-->
    <select id="getSearchNumTag" parameterType="String" resultType="Integer" >
        select count(*) from business_cate where business_cate.category_id in (select id from category where category like CONCAT('%',#{key},'%') ) 
    </select>
    
    <!--  按default搜索数目test-->
    <select id="getSearchNumDefault" parameterType="String" resultType="Integer" >
        select count(*) from business_cate where business_cate.category_id in (select id from category where category like CONCAT('%',#{key},'%') ) 
    </select>
    
    <!-- 按名字搜索restaurant -->
    <select id="getSearchName" parameterType="String" resultType="com.rrs.pojo.Restaurant">               
        select * from business where business.name like CONCAT('%',#{key},'%')      
    </select>
    
    <!-- 按城市搜索restaurant -->
    <select id="getSearchCity" parameterType="String" resultType="com.rrs.pojo.Restaurant">               
        select * from business where business.city like CONCAT('%',#{key},'%')      
    </select>
    
    <!-- 按地址搜索restaurant -->
    <select id="getSearchAddr" parameterType="String" resultType="com.rrs.pojo.Restaurant">               
        select * from business where business.address like CONCAT('%',#{key},'%')      
    </select>
    
    <!-- 按标签搜索restaurant -->
    <select id="getSearchTag" parameterType="String" resultType="com.rrs.pojo.Restaurant">               
        select * from business where business.id in (select business_id from business_cate where business_cate.category_id in (select id from category where category like CONCAT('%',#{key},'%') ) )    
    </select>
    
    <!-- 无标签提示搜索restaurant -->
    <select id="getSearchDefault" parameterType="String" resultType="com.rrs.pojo.Restaurant">               
        select * from business where business.name like CONCAT('%',#{key},'%') or business.city like CONCAT('%',#{key},'%') or
        business.address like CONCAT('%',#{key},'%') or   business.id in (select business_id from business_cate where business_cate.category_id in (select id from category where category like CONCAT('%',#{key},'%') ) )
    </select>
    
    
    <!-- 判断搜索记录是否存在于热门搜索表中 -->
    <select id="isInhot" parameterType="String" resultType="Integer">               
        select count(*) from search_hot where search_hot.hotkey = #{key}
    </select>
    
    <!-- 更新热门搜索表-->
	<insert parameterType="String" id="insertHot"> 
		INSERT INTO search_hot (hotkey) VALUES(#{0}) 
	</insert>
    
	<!-- 热门搜索表count++-->
	<update parameterType="String" id="modifyHot"> 
		update search_hot set count = count+1 where hotkey = #{key}; 
	</update>
	
	<!-- 用户搜索记录表插入数据-->
	<insert parameterType="String" id="insertRec"> 
		INSERT INTO search_rec (uid,searkey) VALUES(#{1},#{0}) 
	</insert>
	
	<!-- 判断用户搜索记录 -->
    <select id="searBefore" parameterType="String" resultType="Integer">               
        select count(*) from search_rec where searkey = #{0} and uid = #{1}
    </select>
    
    <!-- 在搜索记录表中更新纪录-->
	<update parameterType="String" id="modifyRec"> 
		update search_rec set count = count+1 where searkey = #{0} and uid = #{1} 
	</update>
	
</mapper>